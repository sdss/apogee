#!/usr/bin/env python
# encoding: utf-8
#
# @Author: Jon Holtzman
# @Date: March 2018
# @Filename: aspcap
# @License: BSD 3-Clause
# @Copyright: Jon Holtzman


from __future__ import division
from __future__ import print_function
from __future__ import absolute_import
from __future__ import unicode_literals

import argparse
import os
import sys
import subprocess
import pdb
import datetime
import time
from apogee.aspcap import aspcap
from apogee.aspcap import cal
from apogee.utils import finish

if __name__ == '__main__' :

    parser = argparse.ArgumentParser(
        prog=os.path.basename(sys.argv[0]),
        description='Runs ASPCAP IDL routine')

    parser.add_argument('planfile', type=str, help='Plan file')
    parser.add_argument("--done")
    parser.add_argument("--host")
    parser.add_argument("--cal", type=str, help='calibration dir (and calibrate only')
    parser.add_argument('--nobj', type=int, help='Maximum objects',default=None)
    parser.add_argument('--mult', help='multiple starting guesses?',action="store_true")
    parser.add_argument('--noparam', help='Skip parameter determination?',action="store_true")
    parser.add_argument('--calparam', help='Skip redo parameter determination with calibrated logg?',action="store_true")
    parser.add_argument('--noelem', help='Skip elemental abundances?',action="store_true")
    parser.add_argument('--calelem', help='Skip elemental abundances?',action="store_true")
    parser.add_argument('--noplot', help='Skip plots?',action="store_true")
    parser.add_argument('--elemplot', help='Add elemental plots (lots!)?',action="store_true")
    parser.add_argument('--minmjdlast', type=str, help='require last MJD>minmjdlast')
    parser.add_argument('--clobber', help='Overwrite files?',action="store_true")
    parser.add_argument("--flag",default='11111')
    args=parser.parse_args()

    now = datetime.datetime.now()
    start = time.time()
    print("Start: ",now.strftime("%Y-%m-%d %H:%M:%S"))

    try:
      if '.yml' in args.planfile :
        if not args.noparam :
            # initial fit with vmicro relation
            print('Initial parameters from initial RV parameters, fixed vmicro')
            #out=aspcap.fit_params(args.planfile,clobber=args.clobber,fix=['LOG10VDOP'],renorm=False,html=False)
            out=aspcap.fit_params(args.planfile,clobber=args.clobber,fix=['C','N'],renorm=False,html=False,nobj=args.nobj)
            #refit with renomalization and with all paramters fit
            print('Refit with renomalization, initial fit parameters, all parameters fit')
            out_renorm=aspcap.fit_params(args.planfile,aspcapdata=out,clobber=args.clobber,
                                         init='FPARAM',renorm=True,html=False,nobj=args.nobj,mult=args.mult)
        if args.calparam :
            #calibrate log g
            out_renorm[0]['PARAM'] = out_renorm[0]['FPARAM'] 
            out_renorm[0]['PARAM'][:,1] = cal.logg(out_renorm[0])
            print('Refit with fixed calibrated log g')
            out_calib=aspcap.fit_params(args.planfile,aspcapdata=out_renorm,clobber=args.clobber,
                                        init='PARAM',fix=['LOGG'],renorm=True,suffix='_cal',html=False,nobj=args.nobj)
            out_calib[0]['PARAM'] = out_calib[0]['FPARAM'] 

        if not args.noelem :
            print('Abundances with uncalibrated fit parameters')
            out_elem=aspcap.fit_elems(args.planfile,clobber=args.clobber,renorm=True,nobj=args.nobj)

        if args.calelem :
            print('Abundances with refit parameters using calibrated log g')
            out_elem_calib=aspcap.fit_elems(args.planfile,aspcapdata=out_calib,clobber=args.clobber,renorm=True,suffix='_cal',calib=True,nobj=args.nobj)

 
      else :
        if args.clobber: clobber='1'
        else : clobber='0'
        if args.noelem: noelem=',/noelem'
        else : noelem=''
        if args.noplot: noplot=',/noplot'
        else : noplot=''
        if args.elemplot: elemplot=',/elemplot'
        else : elemplot=''
        if args.minmjdlast: minmjdlast=',minmjdlast='+args.minmjdlast
        else : minmjdlast=''
        if args.cal is not None : cal=',cal="'+args.cal+'"'
        else :  cal=''
        subprocess.call(["idl","-e","aspcaprun,'"+args.planfile+"','"+args.flag+"','"+clobber+"'"+noelem+noplot+elemplot+minmjdlast+cal])

      print('aspcap completed successfully for {:s}'.format(args.planfile))
      finish.done(args.done,args.host,start)


    except :
      print('aspcap failed for {:s}'.format(args.planfile))
      finish.done(args.done,args.host,start)
      raise
